package com.in.den.android.openweather.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WEATHER".
*/
public class WeatherDao extends AbstractDao<Weather, Long> {

    public static final String TABLENAME = "WEATHER";

    /**
     * Properties of entity Weather.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Dt = new Property(1, long.class, "dt", false, "DT");
        public final static Property Temp_day = new Property(2, Double.class, "temp_day", false, "TEMP_DAY");
        public final static Property Temp_min = new Property(3, Double.class, "temp_min", false, "TEMP_MIN");
        public final static Property Temp_max = new Property(4, Double.class, "temp_max", false, "TEMP_MAX");
        public final static Property Temp_night = new Property(5, Double.class, "temp_night", false, "TEMP_NIGHT");
        public final static Property Temp_eve = new Property(6, Double.class, "temp_eve", false, "TEMP_EVE");
        public final static Property Temp_morning = new Property(7, Double.class, "temp_morning", false, "TEMP_MORNING");
        public final static Property Pressure = new Property(8, Double.class, "pressure", false, "PRESSURE");
        public final static Property Humidity = new Property(9, Double.class, "humidity", false, "HUMIDITY");
        public final static Property Speed = new Property(10, Double.class, "speed", false, "SPEED");
        public final static Property Deg = new Property(11, Double.class, "deg", false, "DEG");
        public final static Property Cloud = new Property(12, Double.class, "cloud", false, "CLOUD");
        public final static Property Rain = new Property(13, Double.class, "rain", false, "RAIN");
        public final static Property Weather_id = new Property(14, Integer.class, "weather_id", false, "WEATHER_ID");
        public final static Property Weather_main = new Property(15, String.class, "weather_main", false, "WEATHER_MAIN");
        public final static Property Weather_description = new Property(16, String.class, "weather_description", false, "WEATHER_DESCRIPTION");
        public final static Property Owcityid = new Property(17, Integer.class, "owcityid", false, "OWCITYID");
        public final static Property LocationId = new Property(18, long.class, "locationId", false, "LOCATION_ID");
    }

    private Query<Weather> location_LocationidQuery;

    public WeatherDao(DaoConfig config) {
        super(config);
    }
    
    public WeatherDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WEATHER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DT\" INTEGER NOT NULL ," + // 1: dt
                "\"TEMP_DAY\" REAL," + // 2: temp_day
                "\"TEMP_MIN\" REAL," + // 3: temp_min
                "\"TEMP_MAX\" REAL," + // 4: temp_max
                "\"TEMP_NIGHT\" REAL," + // 5: temp_night
                "\"TEMP_EVE\" REAL," + // 6: temp_eve
                "\"TEMP_MORNING\" REAL," + // 7: temp_morning
                "\"PRESSURE\" REAL," + // 8: pressure
                "\"HUMIDITY\" REAL," + // 9: humidity
                "\"SPEED\" REAL," + // 10: speed
                "\"DEG\" REAL," + // 11: deg
                "\"CLOUD\" REAL," + // 12: cloud
                "\"RAIN\" REAL," + // 13: rain
                "\"WEATHER_ID\" INTEGER," + // 14: weather_id
                "\"WEATHER_MAIN\" TEXT," + // 15: weather_main
                "\"WEATHER_DESCRIPTION\" TEXT," + // 16: weather_description
                "\"OWCITYID\" INTEGER," + // 17: owcityid
                "\"LOCATION_ID\" INTEGER NOT NULL );"); // 18: locationId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WEATHER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Weather entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getDt());
 
        Double temp_day = entity.getTemp_day();
        if (temp_day != null) {
            stmt.bindDouble(3, temp_day);
        }
 
        Double temp_min = entity.getTemp_min();
        if (temp_min != null) {
            stmt.bindDouble(4, temp_min);
        }
 
        Double temp_max = entity.getTemp_max();
        if (temp_max != null) {
            stmt.bindDouble(5, temp_max);
        }
 
        Double temp_night = entity.getTemp_night();
        if (temp_night != null) {
            stmt.bindDouble(6, temp_night);
        }
 
        Double temp_eve = entity.getTemp_eve();
        if (temp_eve != null) {
            stmt.bindDouble(7, temp_eve);
        }
 
        Double temp_morning = entity.getTemp_morning();
        if (temp_morning != null) {
            stmt.bindDouble(8, temp_morning);
        }
 
        Double pressure = entity.getPressure();
        if (pressure != null) {
            stmt.bindDouble(9, pressure);
        }
 
        Double humidity = entity.getHumidity();
        if (humidity != null) {
            stmt.bindDouble(10, humidity);
        }
 
        Double speed = entity.getSpeed();
        if (speed != null) {
            stmt.bindDouble(11, speed);
        }
 
        Double deg = entity.getDeg();
        if (deg != null) {
            stmt.bindDouble(12, deg);
        }
 
        Double cloud = entity.getCloud();
        if (cloud != null) {
            stmt.bindDouble(13, cloud);
        }
 
        Double rain = entity.getRain();
        if (rain != null) {
            stmt.bindDouble(14, rain);
        }
 
        Integer weather_id = entity.getWeather_id();
        if (weather_id != null) {
            stmt.bindLong(15, weather_id);
        }
 
        String weather_main = entity.getWeather_main();
        if (weather_main != null) {
            stmt.bindString(16, weather_main);
        }
 
        String weather_description = entity.getWeather_description();
        if (weather_description != null) {
            stmt.bindString(17, weather_description);
        }
 
        Integer owcityid = entity.getOwcityid();
        if (owcityid != null) {
            stmt.bindLong(18, owcityid);
        }
        stmt.bindLong(19, entity.getLocationId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Weather entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getDt());
 
        Double temp_day = entity.getTemp_day();
        if (temp_day != null) {
            stmt.bindDouble(3, temp_day);
        }
 
        Double temp_min = entity.getTemp_min();
        if (temp_min != null) {
            stmt.bindDouble(4, temp_min);
        }
 
        Double temp_max = entity.getTemp_max();
        if (temp_max != null) {
            stmt.bindDouble(5, temp_max);
        }
 
        Double temp_night = entity.getTemp_night();
        if (temp_night != null) {
            stmt.bindDouble(6, temp_night);
        }
 
        Double temp_eve = entity.getTemp_eve();
        if (temp_eve != null) {
            stmt.bindDouble(7, temp_eve);
        }
 
        Double temp_morning = entity.getTemp_morning();
        if (temp_morning != null) {
            stmt.bindDouble(8, temp_morning);
        }
 
        Double pressure = entity.getPressure();
        if (pressure != null) {
            stmt.bindDouble(9, pressure);
        }
 
        Double humidity = entity.getHumidity();
        if (humidity != null) {
            stmt.bindDouble(10, humidity);
        }
 
        Double speed = entity.getSpeed();
        if (speed != null) {
            stmt.bindDouble(11, speed);
        }
 
        Double deg = entity.getDeg();
        if (deg != null) {
            stmt.bindDouble(12, deg);
        }
 
        Double cloud = entity.getCloud();
        if (cloud != null) {
            stmt.bindDouble(13, cloud);
        }
 
        Double rain = entity.getRain();
        if (rain != null) {
            stmt.bindDouble(14, rain);
        }
 
        Integer weather_id = entity.getWeather_id();
        if (weather_id != null) {
            stmt.bindLong(15, weather_id);
        }
 
        String weather_main = entity.getWeather_main();
        if (weather_main != null) {
            stmt.bindString(16, weather_main);
        }
 
        String weather_description = entity.getWeather_description();
        if (weather_description != null) {
            stmt.bindString(17, weather_description);
        }
 
        Integer owcityid = entity.getOwcityid();
        if (owcityid != null) {
            stmt.bindLong(18, owcityid);
        }
        stmt.bindLong(19, entity.getLocationId());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Weather readEntity(Cursor cursor, int offset) {
        Weather entity = new Weather( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // dt
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // temp_day
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // temp_min
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // temp_max
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // temp_night
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // temp_eve
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // temp_morning
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // pressure
            cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9), // humidity
            cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10), // speed
            cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11), // deg
            cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12), // cloud
            cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13), // rain
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // weather_id
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // weather_main
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // weather_description
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // owcityid
            cursor.getLong(offset + 18) // locationId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Weather entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDt(cursor.getLong(offset + 1));
        entity.setTemp_day(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setTemp_min(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setTemp_max(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setTemp_night(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setTemp_eve(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setTemp_morning(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setPressure(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setHumidity(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
        entity.setSpeed(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
        entity.setDeg(cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11));
        entity.setCloud(cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12));
        entity.setRain(cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13));
        entity.setWeather_id(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setWeather_main(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setWeather_description(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setOwcityid(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setLocationId(cursor.getLong(offset + 18));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Weather entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Weather entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Weather entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "locationid" to-many relationship of Location. */
    public List<Weather> _queryLocation_Locationid(long locationId) {
        synchronized (this) {
            if (location_LocationidQuery == null) {
                QueryBuilder<Weather> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.LocationId.eq(null));
                location_LocationidQuery = queryBuilder.build();
            }
        }
        Query<Weather> query = location_LocationidQuery.forCurrentThread();
        query.setParameter(0, locationId);
        return query.list();
    }

}
