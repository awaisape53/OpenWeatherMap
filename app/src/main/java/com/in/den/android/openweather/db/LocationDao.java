package com.in.den.android.openweather.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOCATION".
*/
public class LocationDao extends AbstractDao<Location, Long> {

    public static final String TABLENAME = "LOCATION";

    /**
     * Properties of entity Location.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Owcityid = new Property(1, int.class, "owcityid", false, "OWCITYID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Alias = new Property(3, String.class, "alias", false, "ALIAS");
        public final static Property Country = new Property(4, String.class, "country", false, "COUNTRY");
        public final static Property Coord_lon = new Property(5, Double.class, "coord_lon", false, "COORD_LON");
        public final static Property Coord_lat = new Property(6, Double.class, "coord_lat", false, "COORD_LAT");
    }

    private DaoSession daoSession;


    public LocationDao(DaoConfig config) {
        super(config);
    }
    
    public LocationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOCATION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"OWCITYID\" INTEGER NOT NULL UNIQUE ," + // 1: owcityid
                "\"NAME\" TEXT NOT NULL ," + // 2: name
                "\"ALIAS\" TEXT," + // 3: alias
                "\"COUNTRY\" TEXT," + // 4: country
                "\"COORD_LON\" REAL," + // 5: coord_lon
                "\"COORD_LAT\" REAL);"); // 6: coord_lat
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOCATION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Location entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getOwcityid());
        stmt.bindString(3, entity.getName());
 
        String alias = entity.getAlias();
        if (alias != null) {
            stmt.bindString(4, alias);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(5, country);
        }
 
        Double coord_lon = entity.getCoord_lon();
        if (coord_lon != null) {
            stmt.bindDouble(6, coord_lon);
        }
 
        Double coord_lat = entity.getCoord_lat();
        if (coord_lat != null) {
            stmt.bindDouble(7, coord_lat);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Location entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getOwcityid());
        stmt.bindString(3, entity.getName());
 
        String alias = entity.getAlias();
        if (alias != null) {
            stmt.bindString(4, alias);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(5, country);
        }
 
        Double coord_lon = entity.getCoord_lon();
        if (coord_lon != null) {
            stmt.bindDouble(6, coord_lon);
        }
 
        Double coord_lat = entity.getCoord_lat();
        if (coord_lat != null) {
            stmt.bindDouble(7, coord_lat);
        }
    }

    @Override
    protected final void attachEntity(Location entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Location readEntity(Cursor cursor, int offset) {
        Location entity = new Location( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // owcityid
            cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // alias
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // country
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // coord_lon
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6) // coord_lat
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Location entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOwcityid(cursor.getInt(offset + 1));
        entity.setName(cursor.getString(offset + 2));
        entity.setAlias(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCountry(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCoord_lon(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setCoord_lat(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Location entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Location entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Location entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
