package com.in.den.android.openweather.db;

import org.greenrobot.greendao.annotation.*;

import java.io.Serializable;
import java.util.List;
import com.in.den.android.openweather.db.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "LOCATION".
 */
@Entity(active = true)
public class Location implements Serializable{

    @Id(autoincrement = true)
    private Long id;

    @Unique
    private int owcityid;

    @NotNull
    private String name;
    private String alias;
    private String country;
    private Double coord_lon;
    private Double coord_lat;

    /** Used to resolve relations */
    @Generated(hash = 2040040024)
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated(hash = 842527347)
    private transient LocationDao myDao;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "locationId")
    })
    @OrderBy("dt ASC")
    private List<Weather> locationid;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated(hash = 375979639)
    public Location() {
    }

    public Location(Long id) {
        this.id = id;
    }

    @Generated(hash = 666744572)
    public Location(Long id, int owcityid, @NotNull String name, String alias, String country, Double coord_lon, Double coord_lat) {
        this.id = id;
        this.owcityid = owcityid;
        this.name = name;
        this.alias = alias;
        this.country = country;
        this.coord_lon = coord_lon;
        this.coord_lat = coord_lat;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public int getOwcityid() {
        return owcityid;
    }

    public void setOwcityid(int owcityid) {
        this.owcityid = owcityid;
    }

    @NotNull
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(@NotNull String name) {
        this.name = name;
    }

    public String getAlias() {
        return alias;
    }

    public void setAlias(String alias) {
        this.alias = alias;
    }

    public String getCountry() {
        return country;
    }

    public void setCountry(String country) {
        this.country = country;
    }

    public Double getCoord_lon() {
        return coord_lon;
    }

    public void setCoord_lon(Double coord_lon) {
        this.coord_lon = coord_lon;
    }

    public Double getCoord_lat() {
        return coord_lat;
    }

    public void setCoord_lat(Double coord_lat) {
        this.coord_lat = coord_lat;
    }

    /**
     * To-many relationship, resolved on first access (and after reset).
     * Changes to to-many relations are not persisted, make changes to the target entity.
     */
    @Generated(hash = 1535579102)
    public List<Weather> getLocationid() {
        if (locationid == null) {
            final DaoSession daoSession = this.daoSession;
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            WeatherDao targetDao = daoSession.getWeatherDao();
            List<Weather> locationidNew = targetDao._queryLocation_Locationid(id);
            synchronized (this) {
                if (locationid == null) {
                    locationid = locationidNew;
                }
            }
        }
        return locationid;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated(hash = 765823718)
    public synchronized void resetLocationid() {
        locationid = null;
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 128553479)
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 713229351)
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 1942392019)
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated(hash = 1046799944)
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getLocationDao() : null;
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
